{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/forms\";\n\nfunction ListComponent_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 6)(1, \"p\", 7);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"button\", 8);\n    i0.ɵɵlistener(\"click\", function ListComponent_div_6_Template_button_click_3_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r4);\n      const i_r2 = restoredCtx.index;\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.removeTask(i_r2));\n    });\n    i0.ɵɵtext(4, \"delete\");\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const task_r1 = ctx.$implicit;\n    const i_r2 = ctx.index;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate2(\"\", i_r2, \" \", task_r1.content, \"\");\n  }\n}\n\nexport let ListComponent = /*#__PURE__*/(() => {\n  class ListComponent {\n    constructor() {\n      // instantiate variable as an empty string\n      this.addTask = \"\";\n      this.addId = 0; // instantiate 'lists' variable\n\n      this.lists = [];\n      this.addId = 0;\n    }\n\n    ngOnInit() {\n      //array of task that are to be displayed on the main app\n      this.lists = [{\n        content: 'Wash the dishes',\n        id: 1\n      }, {\n        content: 'Laundry',\n        id: 2\n      }];\n    }\n    /*\r\n    *\r\n    * Method to remove a task from the list.\r\n    * id = pointer is automatically added for every task in the list.\r\n    * id only allows number and will return an error ef ever the output is not a number.\r\n    *\r\n    */\n\n\n    removeTask(index) {\n      // if index is not equal to id, do not return anything\n      this.lists = this.lists.filter((c, i) => i !== index);\n    }\n    /*\r\n    * Method to add task into the list\r\n    *\r\n    */\n\n\n    newTask() {\n      this.lists.push({\n        content: this.addTask,\n        id: this.addId\n      }); // clears the input after adding task\n\n      this.addTask = \"\";\n    }\n\n  }\n\n  ListComponent.ɵfac = function ListComponent_Factory(t) {\n    return new (t || ListComponent)();\n  };\n\n  ListComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ListComponent,\n    selectors: [[\"app-list\"]],\n    decls: 7,\n    vars: 2,\n    consts: [[1, \"list\"], [3, \"submit\"], [1, \"d-flex\"], [\"type\", \"text\", \"name\", \"addTask\", \"placeholder\", \"Enter new task\", \"required\", \"\", 1, \"add-task\", \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", \"mx-3\"], [\"class\", \"task d-flex justify-content-between align-items-center rounded my-4 p-3\", \"style\", \"background-color: #dadada;\", 4, \"ngFor\", \"ngForOf\"], [1, \"task\", \"d-flex\", \"justify-content-between\", \"align-items-center\", \"rounded\", \"my-4\", \"p-3\", 2, \"background-color\", \"#dadada\"], [1, \"content\", \"m-0\"], [1, \"delete\", \"btn\", \"btn-danger\", 3, \"click\"]],\n    template: function ListComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"form\", 1);\n        i0.ɵɵlistener(\"submit\", function ListComponent_Template_form_submit_1_listener() {\n          return ctx.newTask();\n        });\n        i0.ɵɵelementStart(2, \"div\", 2)(3, \"input\", 3);\n        i0.ɵɵlistener(\"ngModelChange\", function ListComponent_Template_input_ngModelChange_3_listener($event) {\n          return ctx.addTask = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"button\", 4);\n        i0.ɵɵtext(5, \"Add\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵtemplate(6, ListComponent_div_6_Template, 5, 2, \"div\", 5);\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngModel\", ctx.addTask);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngForOf\", ctx.lists);\n      }\n    },\n    dependencies: [i1.NgForOf, i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.RequiredValidator, i2.NgModel, i2.NgForm]\n  });\n  return ListComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}